/*
#####################################################################################################
#####################################################################################################
###                                                                                               ###
###                       Pontifícia Universidade Catolica - PUC Minas                            ###
###                                                                                               ###
###                       Ciencias da Computação - 2º Periodo                                     ###
###                       Algoritmos e Estruturas de Dados 2                                      ###
###                       Professor: Rafael Martins D'addio                                       ###
###                                                                                               ###
###                       Tarefa Desafio: Implementação de Listas                                 ###
###                                                                                               ###
#####################################################################################################
#####################################################################################################
*/
//LISTA LINEAR SIMPLESMENTE ENCADEADA

#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

typedef struct no
{
    int dado;
    struct no* prox;
} No;

typedef struct
{
    No* inicio;
    No* fim;
    int tam;
} ListaLSE;

void cria(ListaLSE* l);
int insereInicio(ListaLSE* l, int dado);
int insereFim(ListaLSE* l, int dado);
int insereOrdenado(ListaLSE* l, int dado);
int retira(ListaLSE* l, int dado);
int estaVazia(ListaLSE l);
int getInicio(ListaLSE l);
int getFim(ListaLSE l);
int getTamanho(ListaLSE l);
void mostra(ListaLSE l, int sentido);

int main()
{
    ListaLSE l;
    int opcao;
    int dado;
    int sucesso;

    cria(&l);

    // INSERINDO ORDENADO
    insereFim(&l, 400);
    insereInicio(&l, 250);
    insereOrdenado(&l, 10);
    insereOrdenado(&l, 666);
    insereOrdenado(&l, 5000);

    // Exibindo a lista
    printf("\n-------------------------------------------------\n");
    printf("Lista Linear Simplesmente Encadeada - exibir do inicio pro fim, ordenado.");
    printf("\n-------------------------------------------------\n");

    do
    {
        printf("\n\nDIGITE 1 - Para exibir lista do comeco ao fim...");
        printf("\nDIGITE 2 - Para exibir lista do fim ao comeco...\n");
        printf("Opcao:");
        scanf("%d", &opcao);
        mostra(l,opcao);

    }
    while(opcao!=1 && opcao!=2);

    do
    {
// Remover até o usuário não querer mais
        dado = 0;
        printf("\n-------------------------------------------------\n");
        printf("Qual dado deseja remover? ");
        scanf("%d", &dado);
        getchar();


        sucesso = retira(&l, dado); // Removo o elemento solicitado pelo usuário

        if (!sucesso)
            printf("FALHA EM REMOVER: %d\n\n", dado);

        system("cls");
        mostra(l, 1); // Exibo a lista atualizada
        printf("\nDeseja remover mais algum elemento?\n1 - sim\n2 - nao\n");
        scanf("%d", &opcao);
        getchar();

        if (opcao == 2)
        {
            printf("\n\nEncerrando o programa...\n");
            exit(1);
        }

        if (opcao!=1 && opcao!=2)
        {
            printf("Opcao invalida");
        }

    }
    while (opcao = 1);

    // Liberando memória...
    while (!estaVazia(l))
    {
        sucesso = retira(&l, getInicio(l)); // Retirando sempre o primeiro elemento
    }

    return 0;
}

void cria(ListaLSE* l)
{
    l->inicio = NULL;
    l->fim = NULL;
    l->tam = 0;
}

int insereInicio(ListaLSE* l, int dado)
{
    No* aux = (No*)malloc(sizeof(No));
    if (aux == NULL)
        return 0;

    aux->dado = dado;
    aux->prox = l->inicio;

    if (l->inicio == NULL)
    {
        l->fim = aux;
    }

    l->inicio = aux;
    l->tam++;
    return 1;
}

int insereFim(ListaLSE* l, int dado)
{
    No* aux = (No*)malloc(sizeof(No));
    if (aux == NULL)
        return 0;

    aux->dado = dado;
    aux->prox = NULL;

    if (l->inicio == NULL)
        l->inicio = aux;
    else
        l->fim->prox = aux;

    l->fim = aux;
    l->tam++;
    return 1;
}

int insereOrdenado(ListaLSE* l, int dado)
{
    No* aux = (No*)malloc(sizeof(No));
    if (aux == NULL)
        return 0;

    aux->dado = dado;
    l->tam++;

    //INSERINDO PRIMEIRO DADO
    if (l->inicio == NULL)
    {
        l->inicio = aux;
        l->fim = aux;
        aux->prox = l->inicio;
        return 1;
    }

    //INSERINDO NO INICIO
    if (dado < l->inicio->dado)
    {

        aux->prox = l->inicio;
        l->inicio = aux;
        return 1;
    }

    //INSERINDO NO FIM
    if (dado > l->fim->dado)
    {
        aux->prox = l->inicio;
        l->fim = aux;
        return 1;
    }


    //INSERINDO NO MEIO
    No* atual = l->inicio;
    No* anterior = NULL;

    while (atual != NULL && dado > atual->dado)
    {
        anterior = atual;
        atual = atual->prox;
    }

    aux->prox = atual;

    if (anterior == NULL)
        l->inicio = aux;


    else
        l->fim = aux;

    if (atual == NULL)
    {
        l->fim = aux;
    }

    return 1;
}

int retira(ListaLSE* l, int dado)
{
    No* aux;

    if (l->inicio == NULL)
    {
        printf("Lista vazia\n");
        return 0;
    }

    if ((dado == l->inicio->dado) && (l->inicio == l->fim))
    {
        aux = l->inicio;
        l->inicio = NULL;
        l->fim = NULL;
        free(aux);
        l->tam--;
        return 1;
    }

    if (dado == l->inicio->dado)
    {
        aux = l->inicio;
        l->inicio = aux->prox;
        l->fim->prox = l->inicio;
        free(aux);
        l->tam--;
        return 1;
    }

    if (dado == l->fim->dado)
    {
        aux = l->fim;
        l->fim->prox = l->inicio;
        l->inicio = l->fim;
        free(aux);
        l->tam--;
        return 1;
    }

    aux = l->inicio->prox;

    while ((dado != aux->dado) && (aux != l->fim))
        aux = aux->prox;

    if (aux == l->fim)
    {
        printf("O elemento %d não está na lista.\n", dado);
        return 0;
    }

    aux->prox = aux->prox->prox;
    free(aux);
    l->tam--;
    return 1;
}

int estaVazia(ListaLSE l)
{
    return l.inicio == NULL;
}

int getInicio(ListaLSE l)
{
    return l.inicio->dado;
}

int getFim(ListaLSE l)
{
    return l.fim->dado;
}

int getTamanho(ListaLSE l)
{
    return l.tam;
}

void mostra(ListaLSE l, int sentido)
{
    No* aux;

    if (l.inicio == NULL)
    {
        printf("\nLista vazia!\n");
        return;
    }

    if (sentido == 1)
    {
        printf("\nExibindo lista do inicio ao fim:\n");
        aux = l.inicio;
        while (aux != NULL)
        {
            printf("Dado: %d\n", aux->dado);
            aux = aux->prox;
        }
    }
    else if (sentido == 2)
    {
        printf("\nExibindo lista do fim ao inicio:\n");
        aux = l.fim;
        while (aux != NULL)
        {
            printf("Dado: %d\n", aux->dado);
            aux = aux->prox;
        }
    }
    else
    {
        printf("Sentido invalido!\n");
    }
}
