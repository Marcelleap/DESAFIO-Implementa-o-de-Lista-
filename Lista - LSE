#include<stdio.h>
#include<stdlib.h>

typedef struct no
{
    int dado;
    struct no *prox;
} No;

typedef struct
{
    No *inicio;
    No *fim;
    int tam;
} ListaLSE;

//funcoes de manipulacao
void cria(ListaLSE *l);
int insere(ListaLSE *l, int dado);
int insereOrdenado(ListaLSE *l, int dado);
int retira(ListaLSE *l, int dado);

//funcoes de visualizacao
int estaVazia(ListaLSE l);
int getInicio(ListaLSE l);
int getFim(ListaLSE l);
int getTamanho(ListaLSE l);
void mostra(ListaLSE);

int main()
{
    ListaLSE l;
    int dado, sucesso, opcao;

    cria(&l);

    /* INSERINDO DESORDENADO
    sucesso = insere(&l, 400); // eu optei por nao verificar se houve sucesso na insercao
    sucesso = insere(&l, 250);
    sucesso = insere(&l, 666);
    sucesso = insere(&l, 5000);
    sucesso = insere(&l, 10); */

    /* INSERINDO ORDENADO */
    sucesso = insereOrdenado(&l, 400); // eu optei por nao verificar se houve sucesso na insercao
    sucesso = insereOrdenado(&l, 250);
    sucesso = insereOrdenado(&l, 666);
    sucesso = insereOrdenado(&l, 5000);
    sucesso = insereOrdenado(&l, 10);

    if(!estaVazia(l)){  //exibindo a lista
        printf("\n-------------------------------------------------\n");
        printf("Deseja ver os dados da lista?\n1 - sim \n2 - nao\n");
        scanf("%d", &opcao);
        if(opcao == 2)
            exit(1);
        mostra(l);
    }

    opcao = 1;
    while(opcao == 1){  // remover ate o usuario nao querer mais
        printf("\n-------------------------------------------------\n");
        printf("Qual dado deseja remover? ");
        scanf("%d", &dado);

        sucesso = retira(&l, dado); // removo o elemento solicitado pelo usuario
        if(!sucesso)
            printf("FALHA EM REMOVER: %d\n\n", dado);

        mostra(l); // exibo a lista atualizada

        printf("\nDeseja remover mais algum elemento? \n1 - sim \n2 - nao\n");
        scanf("%d", &opcao);
    }

    // liberando memoria...
    while(!estaVazia(l))
        sucesso = retira(&l, getInicio(l)); //retirando sempre o primeiro elemento
}

void cria(ListaLSE *l){
    l->inicio = NULL;
    l->fim = NULL;
    l->tam = 0;
}

int insere(ListaLSE *l, int dado){
    // alocando no na memoria e checando se deu certo
    No *aux = (No *) malloc(sizeof(No));
    if(aux == NULL)
        return 0;

    // guardando o dado e incrementando o tamanho da lista
    aux->dado = dado;
    l->tam++;

    // 1o caso: primeiro elemento
    if(l->inicio == NULL){
        //inicio e fim da lista apontam para o novo no
        l->inicio = aux;
        l->fim = aux;
        //prox do novo no aponta para NULL
        aux->prox = NULL;

        return 1;
    }

    // 2o caso: ja ha elementos, insere no fim
    aux->prox = NULL; //prox do novo fim aponta para NULL
    l->fim->prox = aux; //prox do antigo fim aponta para novo fim
    l->fim = aux; //l->fim aponta para novo fim

    return 1;
}

int insereOrdenado(ListaLSE *l, int dado){
    // alocando no na memoria e checando se deu certo
    No *aux = (No *) malloc(sizeof(No));
    if(aux == NULL)
        return 0;

    // guardando o dado e incrementando o tamanho da lista
    aux->dado = dado;
    l->tam++;

    // 1o caso: primeiro elemento
    if(l->inicio == NULL){
        //inicio e fim apontam para o novo no
        l->inicio = aux;
        l->fim = aux;
        //prox do novo no aponta para NULL
        aux->prox = NULL;

        return 1;
    }

    /* 2o caso: dado menor que o dado do inicio, insere no inicio */
    if(dado < l->inicio->dado){
        aux->prox = l->inicio; //prox do novo inicio aponta para antigo inicio
        l->inicio = aux; //l->inicio aponta para novo inicio
        l->fim->prox = NULL; //proximo do fim aponta para NULL

        return 1;
    }

    /* 3o caso: dado maior que o dado do fim, insere no fim */
    if(dado > l->fim->dado){
        aux->prox = NULL; //prox do novo fim aponta para NULL
        l->fim->prox = aux; //prox do antigo fim aponta para novo fim
        l->fim = aux; //l->fim aponta para novo fim

        return 1;
    }

    /* 4o caso: insercao ordenada no meio */

    // inicializa-se dois nos no comeco da lista, que serao responsaveis por percorre-la
    No *anterior = l->inicio;
    No *atual = anterior->prox;

    while(dado > atual->dado){
        // percorro a lista ate achar a posicao certa
        anterior = atual;
        atual = atual->prox;
    }

    // insiro o no entre anterior e atual
    aux->prox = atual; // prox do novo no aponta para atual
    anterior->prox = aux; // prox do anterior aponta para o novo no

    return 1;
}

int retira(ListaLSE *l, int dado){
    No *atual = l->inicio;
    No *anterior = NULL;

    if (atual == NULL){
        printf("Lista vazia\n");
        return 0;
    }

    // Procurando o elemento na lista
    while (atual != NULL && atual->dado != dado){
        anterior = atual;
        atual = atual->prox;
    }

    if (atual == NULL){
        printf("O elemento %d nao esta na lista.\n", dado);
        return 0;
    }

   // 1o caso: primeiro elemento
    if (anterior == NULL)
        l->inicio = atual->prox;

    else
        anterior->prox = atual->prox;


    //2o caso: ultimo elemento
    if (atual == l->fim)
        l->fim = anterior;

    free(atual);
    l->tam--;

    return 1;
}

int estaVazia(ListaLSE l){
    if(l.inicio == NULL)
        return 1;

    return 0;
}

int getInicio(ListaLSE l){
    return l.inicio->dado;
}


int getFim(ListaLSE l){
    return l.fim->dado;
}

int getTamanho(ListaLSE l){
    return l.tam;
}

/*
    Exibe os elementos da lista, dependendo do sentido:
    1 - exibe do inicio ao fim
    2 - exibe do fim ao inicio
*/
void mostra(ListaLSE l){
    No *aux;

    if(l.inicio == NULL) // lista vazia, nao mostra nada
        printf("Lista vazia!\n");

    else   // lista possui elementos, mostra da esquerda para direita
    {

        printf("\nExibindo lista do inicio ao fim:\n\n");
        aux = l.inicio;
        do
        {
            printf("Dado: %d\n", aux->dado);
            aux = aux->prox;
        }
        while(aux != NULL);  //percorre e imprime os nos ate chegar em NULL (fim da lista)
    }
}
